syntax = "proto3";

package user.v1;

import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "gogoproto/gogo.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Service";
		version: "1.0";
		contact: {
			name: "tuanden0";
			url: "https://github.com/tuanden0/Buf";
			email: "";
		};
  };
  external_docs: {
    url: "https://github.com/gogo/grpc-example";
    description: "gRPC example repository";
  }
  schemes: HTTPS;
};

option (gogoproto.gostring_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;

service UserService {
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post : "/v1/user"
      body : "*"
    };
  }
  rpc Retrieve(RetrieveRequest) returns (RetrieveResponse) {
    option (google.api.http) = {
      get : "/v1/user/{id}"
    };
  }
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch : "/v1/user/{id}"
      body : "*"
    };
  }
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/v1/user/{id}"
    };
  }
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      post : "/v1/users"
      body : "*"
    };
  }
}

message Pagination {
  uint32 limit = 1 [(validate.rules).uint32.gt = 0];
  uint32 page = 2;
}

message Filter {
  string key = 1;
  string value = 2;
  string method = 3;
}

message Sort {
  string key = 1;
  bool is_asc = 2;
}

message CreateRequest {
  string username = 1 [(gogoproto.moretags) = "validate:\"required\""];
  string password = 2 [(gogoproto.moretags) = "validate:\"required\""];
  string email = 3 [
    (validate.rules).string.email = true,
    (gogoproto.moretags) = "validate:\"required,email\""
  ];
  string role = 4 [(gogoproto.moretags) = "validate:\"role\""];
}

message CreateResponse { 
  uint32 id = 1;
  string username = 2;
  string email = 3;
  string role = 4;
}

message RetrieveRequest { uint32 id = 1; }

message RetrieveResponse {
  uint32 id = 1;
  string username = 2;
  string email = 3;
  string role = 4;
}

message UpdateRequest {
  uint32 id = 1;
  string username = 2;
  string password = 3;
  string email = 4;
  string role = 5;
}

message UpdateResponse {
  uint32 id = 1;
  string username = 2;
  string email = 3;
  string role = 4;
}

message DeleteRequest { uint32 id = 1; }

message DeleteResponse { string message = 1; }

message ListRequest {
  Pagination pagination = 1;
  repeated Filter filters = 2;
  Sort sort = 3;
}

message User {
  uint32 id = 1;
  string username = 2;
  string email = 3;
  string role = 4;
}

message ListResponse { repeated User users = 1; }
